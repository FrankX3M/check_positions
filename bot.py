import asyncio
import logging
import io
import csv
import os
from typing import List, Optional
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from aiogram.exceptions import TelegramNetworkError, TelegramBadRequest

import organic_ya
import xmltree

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.environ.get('TOKENBOT')

if not BOT_TOKEN:
    raise RuntimeError("TOKENBOT –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_QUERIES = 10000  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
MAX_FILE_SIZE = 10 * 1024 * 1024  # 10MB
SLEEP_BETWEEN_REQUESTS = 0.1  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

@dp.message(Command(commands=['start']))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üîç –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ–±—Ä–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å–∞–π—Ç–æ–≤ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ.\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª .txt —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏\n\n"
        "üìä –ü–æ–ª—É—á–∏—Ç–µ CSV —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!"
    )

async def process_queries(queries: List[str], message: Message) -> Optional[bytes]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    
    Args:
        queries: –°–ø–∏—Å–æ–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞
        
    Returns:
        CSV –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ bytes –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    if len(queries) > MAX_QUERIES:
        await message.reply(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ú–∞–∫—Å–∏–º—É–º {MAX_QUERIES}, –ø–æ–ª—É—á–µ–Ω–æ {len(queries)}")
        return None

    try:
        a = organic_ya.Organic()
        output = io.StringIO()
        writer = None
        header_written = False
        
        total_queries = len(queries)
        processed = 0

        for i, query in enumerate(queries, 1):
            if not query.strip():
                continue
                
            try:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i}/{total_queries}: {query}")
                
                # –ü–æ–ª—É—á–∞–µ–º XML –¥–∞–Ω–Ω—ã–µ
                xml_data = a.search_xmlriver(query.strip())
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
                if not header_written:
                    header = xmltree.XmlTree.get_header(xml_data)
                    writer = csv.writer(output)
                    writer.writerow(header)
                    header_written = True

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
                b = xmltree.XmlTree(xml_data, query.strip())
                row = b.get_row()
                writer.writerow(row)
                processed += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
                if i % 10 == 0:
                    try:
                        await message.edit_text(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i}/{total_queries} –∑–∞–ø—Ä–æ—Å–æ–≤...")
                    except TelegramBadRequest:
                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                        pass
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(SLEEP_BETWEEN_REQUESTS)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                continue

        if processed == 0:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
            return None

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes
        csv_content = output.getvalue()
        output.close()
        
        if not csv_content:
            return None
            
        return csv_content.encode('utf-8-sig')  # BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Excel
        
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        return None

async def extract_queries_from_text(text: str) -> List[str]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    if not text:
        return []
    
    queries = []
    for line in text.strip().splitlines():
        line = line.strip()
        if line and not line.startswith('#'):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            queries.append(line)
    
    return queries

async def extract_queries_from_file(message: Message) -> Optional[List[str]]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    if not message.document:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if message.document.file_size and message.document.file_size > MAX_FILE_SIZE:
        await message.reply(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º {MAX_FILE_SIZE // (1024*1024)}MB")
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if message.document.mime_type not in ['text/plain', 'application/octet-stream']:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)")
        return None
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_info = await bot.get_file(message.document.file_id)
        buffer = io.BytesIO()
        await bot.download_file(file_info.file_path, buffer)
        buffer.seek(0)

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        encodings = ['utf-8', 'utf-8-sig', 'windows-1251', 'cp1251']
        content = None
        
        for encoding in encodings:
            try:
                buffer.seek(0)
                content = buffer.read().decode(encoding)
                break
            except UnicodeDecodeError:
                continue
        
        if content is None:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É.")
            return None

        return await extract_queries_from_text(content)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
        return None

@dp.message(F.content_type.in_({'text', 'document'}))
async def handle_message(message: Message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        queries = []

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.text and not message.text.startswith('/'):
            queries = await extract_queries_from_text(message.text)
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
        elif message.document:
            queries = await extract_queries_from_file(message)
            if queries is None:
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å—ã
        if not queries:
            await message.reply(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞!\n\n"
                "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª .txt —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏"
            )
            return

        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status_message = await message.answer(
            f"‚è≥ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤...\n"
            f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å {len(queries) * SLEEP_BETWEEN_REQUESTS / 60:.1f} –º–∏–Ω—É—Ç"
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        csv_data = await process_queries(queries, status_message)
        
        if csv_data is None:
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        try:
            await status_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
            
            input_file = BufferedInputFile(
                csv_data,
                filename=f"search_results_{len(queries)}_queries.csv"
            )
            
            await message.answer_document(
                document=input_file,
                caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(queries)} –∑–∞–ø—Ä–æ—Å–æ–≤"
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await status_message.delete()
            except:
                pass
                
        except TelegramNetworkError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ Telegram: {e}")
            await message.reply(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–±–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –º–µ–Ω—å—à–∏–µ –≥—Ä—É–ø–ø—ã."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")

@dp.message()
async def handle_other(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."
    )

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    try:
        # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(
            bot,
            skip_updates=True,  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            allowed_updates=["message"]  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
